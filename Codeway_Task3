import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
plt.style.use('fivethirtyeight')
%matplotlib inline
df = pd.read_csv('/Churn_Modelling.csv')
df.head()
df.describe()
df.info()
df.isna().sum()
values = df.Exited.value_counts()
labels = ['Not Exited', 'Exited']
fig, ax = plt.subplots(figsize = (4, 3), dpi = 100)
explode = (0, 0.09)
patches, texts, autotexts = ax.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True,
                                   startangle = 90, explode = explode)
plt.pie(values, labels = labels, autopct = '%1.2f%%', shadow = True)
fig, ax = plt.subplots(2, 2, figsize = (16, 10))
sns.boxplot(x = 'Exited', y = 'CreditScore', data = df, ax = ax[0][0])
sns.boxplot(x = 'Exited', y = 'Age', data = df, ax = ax[0][1])
sns.boxplot(x = 'Exited', y = 'Balance', data = df, ax = ax[1][0])
sns.boxplot(x = 'Exited', y = 'EstimatedSalary', data = df, ax = ax[1][1])
plt.tight_layout()
plt.show()
plt.figure(figsize = (20, 12))
corr = df.corr()
sns.heatmap(corr, linewidths = 1, annot = True, fmt = ".2f")
plt.show()
df.drop(columns = ['RowNumber', 'CustomerId', 'Surname'], axis = 1, inplace = True)
df.head()
df.Geography.value_counts()
df['Geography'] = df['Geography'].map({'France' : 0, 'Germany' : 1, 'Spain' : 2})
df['Gender'] = df['Gender'].map({'Male' : 0, 'Female' : 1})
df.head()
from tensorflow.keras.utils import to_categorical
X = df.drop('Exited', axis = 1)
y = to_categorical(df.Exited)
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
import keras
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import BatchNormalization
import seaborn as sns
model = Sequential()
model.add(Dense(10, kernel_initializer = 'normal', activation = 'relu', input_shape = (10, )))
model.add(Dropout(rate = 0.1))
model.add(BatchNormalization())
model.add(Dense(7, kernel_initializer = 'normal', activation = 'relu'))
model.add(Dropout(rate = 0.1))
model.add(BatchNormalization())
model.add(Dense(2, kernel_initializer = 'normal', activation = 'sigmoid'))
model.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
model_history = model.fit(X_train, y_train, validation_split = 0.20, validation_data = (X_test, y_test), epochs = 100)
plt.figure(figsize = (12, 6))
train_loss = model_history.history['loss']
val_loss = model_history.history['val_loss'] 
epoch = range(1, 101)
plt.title('Training and Validation Loss\n')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()
plt.figure(figsize = (12, 6))
sns.lineplot(x = epoch, y = 'loss', data = model_history.history, label = 'Training Loss')
sns.lineplot(x = epoch, y = 'val_loss', data = model_history.history, label = 'Validation Loss')
train_loss = model_history.history['accuracy']
val_loss = model_history.history['val_accuracy'] 
epoch = range(1, 101)
import seaborn as sns
data = model_history.history
data['epoch'] = range(1, 101)
sns.lineplot(data=data, x='epoch', y='loss', label='Training Loss')
sns.lineplot(data=data, x='epoch', y='val_loss', label='Validation Loss')
plt.title('Training and Validation Loss\n')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()
acc = model.evaluate(X_test, y_test)[1]
print(f'Accuracy of model is {acc}')
model.summary()
import seaborn as sns
data = pd.DataFrame({
    'epoch': range(1, 101),
    'train_loss': model_history.history['loss'],
    'val_loss': model_history.history['val_loss'],
})
sns.lineplot(data=data, x='epoch', y='train_loss', label='Training Loss')
sns.lineplot(data=data, x='epoch', y='val_loss', label='Validation Loss')
